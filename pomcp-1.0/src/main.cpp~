#include "battleship.h"
#include "boxpushing.h"
#include "mcts.h"
#include "network.h"
#include "pocman.h"
#include "rocksample.h"
#include "tag.h"
#include "experiment.h"
#include "kitchen.h"

namespace Cucumber
{
    #include "cucumber.h"
}
#include <boost/program_options.hpp>

using namespace std;
using namespace boost::program_options;
using namespace Cucumber;

void UnitTests(MCTS::PARAMS& searchParams)
{
    cout << "Testing UTILS" << endl;
    UTILS::UnitTest();
    cout << "Testing COORD" << endl;
    COORD::UnitTest();
    cout << "Testing MCTS" << endl;
    MCTS::UnitTest(0);
    if (searchParams.MultiAgent)
	MCTS::UnitTest(2);
}

void disableBufferedIO(void)
{
    setbuf(stdout, NULL);
    setbuf(stdin, NULL);
    setbuf(stderr, NULL);
    setvbuf(stdout, NULL, _IONBF, 0);
    setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stderr, NULL, _IONBF, 0);
}

int main(int argc, char* argv[])
{
    MCTS::PARAMS searchParams;
    EXPERIMENT::PARAMS expParams;
    SIMULATOR::KNOWLEDGE knowledge;
    string problem, outputfile, policy;
    int size = 1, number = 1, treeknowledge = 1, rolloutknowledge = 1, smarttreecount = 10;
    double smarttreevalue = 1.0;
    
    //boxpushing params
    int numSmallBoxes = 2;
    double probLargeBoxAgent = 0.0;
    
    //kitchen params
    bool testTrayOnStove = true;
    bool testCerealInCupboard = false;
    
    //multiagent experiment params
    bool rewAdaptive1 = true, rewAdaptive2 = true;
    bool humanDefined1 = false, humanDefined2 = false;
    bool random1 = false, random2 = false;
    

    options_description desc("Allowed options");
    desc.add_options()
        ("help", "produce help message")
        ("test", "run unit tests")
        ("problem", value<string>(&problem), "problem to run")
        ("outputfile", value<string>(&outputfile)->default_value("output.txt"), "summary output file")
        ("policy", value<string>(&policy), "policy file (explicit POMDPs only)")
        ("size", value<int>(&size), "size of problem (problem specific)")
        ("number", value<int>(&number), "number of elements in problem (problem specific)")
        ("timeout", value<double>(&expParams.TimeOut), "timeout (seconds)")
        ("mindoubles", value<int>(&expParams.MinDoubles), "minimum power of two simulations")
        ("maxdoubles", value<int>(&expParams.MaxDoubles), "maximum power of two simulations")
        ("runs", value<int>(&expParams.NumRuns), "number of runs")
        ("accuracy", value<double>(&expParams.Accuracy), "accuracy level used to determine horizon")
        ("horizon", value<int>(&expParams.UndiscountedHorizon), "horizon to use when not discounting")
        ("numsteps", value<int>(&expParams.NumSteps), "number of steps to run when using average reward")
        ("verbose", value<int>(&searchParams.Verbose), "verbosity level")
        ("autoexploration", value<bool>(&expParams.AutoExploration), "Automatically assign UCB exploration constant")
        ("exploration", value<double>(&searchParams.ExplorationConstant), "Manual value for UCB exploration constant")
        ("usetransforms", value<bool>(&searchParams.UseTransforms), "Use transforms")
        ("transformdoubles", value<int>(&expParams.TransformDoubles), "Relative power of two for transforms compared to simulations")
        ("transformattempts", value<int>(&expParams.TransformAttempts), "Number of attempts for each transform")
        ("userave", value<bool>(&searchParams.UseRave), "RAVE")
        ("ravediscount", value<double>(&searchParams.RaveDiscount), "RAVE discount factor")
        ("raveconstant", value<double>(&searchParams.RaveConstant), "RAVE bias constant")
        ("treeknowledge", value<int>(&knowledge.TreeLevel), "Knowledge level in tree (0=Pure, 1=Legal, 2=Smart)")
        ("rolloutknowledge", value<int>(&knowledge.RolloutLevel), "Knowledge level in rollouts (0=Pure, 1=Legal, 2=Smart)")
        ("smarttreecount", value<int>(&knowledge.SmartTreeCount), "Prior count for preferred actions during smart tree search")
        ("smarttreevalue", value<double>(&knowledge.SmartTreeValue), "Prior value for preferred actions during smart tree search")
        ("disabletree", value<bool>(&searchParams.DisableTree), "Use 1-ply rollout action selection")
	("multiagent", value<bool>(&searchParams.MultiAgent), "Distributed decision making")
	("breakonterminate", value<bool>(&expParams.BreakOnTerminate), "Break the loop when a goal state is reached")
	("numsmallboxes", value<int>(&numSmallBoxes), "Number of small boxes (boxpushing problem)")
	("problargeboxagent", value<double>(&probLargeBoxAgent), "Probability of special observation (boxpushing problem)")
	("testtray", value<bool>(&testTrayOnStove), "Test tray on stove (kitchen problem)")
	("testcereal", value<bool>(&testCerealInCupboard), "Test cereal in cupboard (kitchen problem)")
	("rewadaptive1", value<bool>(&rewAdaptive1), "First agent reward-adaptive")
	("rewadaptive2", value<bool>(&rewAdaptive2), "Second agent reward-adaptive")
	("humandefined1", value<bool>(&humanDefined1), "First agent human-defined")
	("humandefined2", value<bool>(&humanDefined2), "Second agent human-defined")
	("random1", value<bool>(&random1), "First agent random")
	("random2", value<bool>(&random2), "Second agent random")
        ;

    variables_map vm;
    store(parse_command_line(argc, argv, desc), vm);
    notify(vm);
    
    searchParams.RewardAdaptive[0] = rewAdaptive1;
    searchParams.RewardAdaptive[1] = rewAdaptive2;
    searchParams.HumanDefined[0] = humanDefined1;
    searchParams.HumanDefined[1] = humanDefined2;
    expParams.RandomActions[0] = random1;
    expParams.RandomActions[1] = random2;

    if (vm.count("help"))
    {
        cout << desc << "\n";
        return 1;
    }

    if (vm.count("problem") == 0)
    {
        cout << "No problem specified" << endl;
        return 1;
    }

    if (vm.count("test"))
    {
        cout << "Running unit tests" << endl;
        UnitTests(searchParams);
        return 0;
    }

    SIMULATOR* real = 0;
    SIMULATOR* simulator = 0;
    
    CUCUMBER* test = new Cucumber::CUCUMBER();

    if (problem == "battleship")
    {
        real = new BATTLESHIP(size, size, number);
        simulator = new BATTLESHIP(size, size, number);
    }
    else if (problem == "pocman")
    {
        real = new FULL_POCMAN;
        simulator = new FULL_POCMAN;
    }
    else if (problem == "network")
    {
        real = new NETWORK(size, number);
        simulator = new NETWORK(size, number);
    }
    else if (problem == "rocksample")
    {
        real = new ROCKSAMPLE(size, number);
        simulator = new ROCKSAMPLE(size, number);
    }
    else if (problem == "tag")
    {
        real = new TAG(number);
        simulator = new TAG(number);
    }
    else if (problem == "boxpushing")
    {
	expParams.BreakOnTerminate = false;
	searchParams.UseTransforms = true;
        real = new BOXPUSHING(numSmallBoxes, probLargeBoxAgent);
        simulator = new BOXPUSHING(numSmallBoxes, probLargeBoxAgent);
    }
    else if (problem == "kitchen")
    {
	searchParams.UseTransforms = false;
	searchParams.MultiAgentPriorCount = 1;
	real = new KITCHEN(testTrayOnStove, testCerealInCupboard);
	simulator = new KITCHEN(testTrayOnStove, testCerealInCupboard);
	searchParams.MultiAgentPriorValue = real->GetRewardRange();
    }
    else if (problem == "cucumber")
    {
	searchParams.UseTransforms = false;
	searchParams.MultiAgentPriorCount = 1;
	real = new CUCUMBER();
	simulator = new CUCUMBER();
	searchParams.MultiAgentPriorValue = real->GetRewardRange();
    }
    else 
    {
        cout << "Unknown problem" << endl;
        exit(1);
    }


    simulator->SetKnowledge(knowledge);
    EXPERIMENT experiment(*real, *simulator, outputfile, expParams, searchParams);
    experiment.DiscountedReturn();

    delete real;
    delete simulator;
    return 0;
}
